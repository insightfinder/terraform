# Local .terraform directories# Local .terraform directories# Byte-compiled / optimized / DLL files

**/.terraform/*

**/.terraform/*__pycache__/

# .tfstate files

*.tfstate*.py[cod]

*.tfstate.*

# .tfstate files*$py.class

# Crash log files

crash.log*.tfstate

crash.*.log

*.tfstate.*# C extensions

# Exclude all .tfvars files, which are likely to contain sensitive data, but keep examples

*.tfvars*.so

*.tfvars.json

# Crash log files

# But include example files

!examples/*.tfvarscrash.log# Distribution / packaging

!external-usage-example/*.tfvars

crash.*.log.Python

# Ignore override files as they are usually used to override resources locally

override.tfbuild/

override.tf.json

*_override.tf# Exclude all .tfvars files, which are likely to contain sensitive datadevelop-eggs/

*_override.tf.json

*.tfvarsdist/

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan

*tfplan**.tfvars.jsondownloads/



# Ignore CLI configuration fileseggs/

.terraformrc

terraform.rc# Ignore override files as they are usually used to override resources locally.eggs/



# Generated filesoverride.tflib/

*-response-*.json

generated-config.jsonoverride.tf.jsonlib64/

api-config.json

monitoring-status.json*_override.tfparts/



# Temporary files*_override.tf.jsonsdist/

*.tmp

*.tempvar/

/tmp/

# Include override files you do wish to add to version control using negated patternwheels/

# IDE files

.vscode/# !example_override.tfshare/python-wheels/

.idea/

*.swp*.egg-info/

*.swo

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan.installed.cfg

# OS files

.DS_Store*tfplan**.egg

Thumbs.db
MANIFEST

# Ignore CLI configuration files

.terraformrc# PyInstaller

terraform.rc#  Usually these files are written by a python script from a template

#  before PyInstaller builds the exe, so as to inject date/other infos into it.

# Generated files*.manifest

*-response-*.json*.spec

generated-config.json

api-config.json# Installer logs

monitoring-status.jsonpip-log.txt

pip-delete-this-directory.txt

# Temporary files

*.tmp# Unit test / coverage reports

*.temphtmlcov/

/tmp/.tox/

.nox/

# IDE files.coverage

.vscode/.coverage.*

.idea/.cache

*.swpnosetests.xml

*.swocoverage.xml

*.cover

# OS files*.py,cover

.DS_Store.hypothesis/

Thumbs.db.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Custom folders
test_config/*
.env

# Terraform
*.tfstate
*.tfstate.*
*.tfplan
*.tfplan.*
.terraform/
.terraform.lock.hcl
terraform.tfvars
override.tf
override.tf.json
*_override.tf
*_override.tf.json
.terraformrc
terraform.rc